package com.supertrade.dkmonster;

import java.util.HashMap;
import java.util.Map;

import com.fxcore2.*;

public class getOrder {

	static Map[] Data;

	public static Map[] main(String[] args) {
        // Check for correct number of arguments
        if (args.length < 4) {
            System.out.println("Not Enough Parameters!");
            System.out.println("USAGE: [user ID] [password] [URL] [connection] [session ID (if needed)] [pin (if needed)]");
            System.exit(1);
        }

		// Connection and session variables
        String mUserID = "";
        String mPassword = "";
        String mURL = "";
        String mConnection = "";
        String mDBName = "";
        String mPin = "";  

        O2GSession mSession = null;

        // Check for correct number of arguments
        if (args.length < 4) {
            System.out.println("Not Enough Parameters!");
            System.out.println("USAGE: [user ID] [password] [URL] [connection] [session ID (if needed)] [pin (if needed)]");
            System.exit(1);
        }

        // Get command line arguments
        mUserID = args[0];
        mPassword = args[1];
        mURL = args[2];
        mConnection = args[3];
        if (args.length > 4) {
            mDBName = args[4];
        }
        if (args.length > 5) {
            mPin = args[5];
        }

        // Create a session, subscribe to session listener, login, get accounts, logout
        try {
            mSession = O2GTransport.createSession();
            SessionStatusListener statusListener = new SessionStatusListener(mSession, mDBName, mPin);
            mSession.subscribeSessionStatus(statusListener);
            mSession.login(mUserID, mPassword, mURL, mConnection);
            while (!statusListener.isConnected() && !statusListener.hasError()) {
                    Thread.sleep(50);
            }
            if (!statusListener.hasError()) {
                
                O2GTableManager manager = mSession.getTableManager();
                while (manager.getStatus() == O2GTableManagerStatus.TABLES_LOADING) {                
                     Thread.sleep(50);
                }
                
                O2GOffersTable orders = null;
                OffersListener listener = null;
                if (manager.getStatus() == O2GTableManagerStatus.TABLES_LOADED) {                
                	orders = (O2GOffersTable)manager.getTable(O2GTableType.ORDERS);                    
                    getOrders(orders);
                    
//                    System.out.print(mInstrument);
                    
                    listener = new OffersListener();
                    
                    orders.subscribeUpdate(O2GTableUpdateType.UPDATE, listener);                                                           
                                        
                }
                
//                System.out.println("Press enter to stop!");
//                System.in.read();
                
                if (orders != null) {
                	orders.unsubscribeUpdate(O2GTableUpdateType.UPDATE, listener);
                }
                
                mSession.logout();
                while (!statusListener.isDisconnected()) {
                    Thread.sleep(50);
                }
            }
            mSession.unsubscribeSessionStatus(statusListener);
            mSession.dispose();
        } catch (Exception e) {
            System.out.println ("Exception: " + e.getMessage());
//            System.exit(1);
        }
		return Data;
        
	}
    
    // Get orders information
    public static void getOrders(O2GOrdersTable orders) { 
        try {            
        	O2GOrdersTable offer = null;
            O2GTableIterator iterator = new O2GTableIterator();
            orders = orders.getNextRow(iterator);
            Data = new Map[orders.size()];
            for(int i = 0 ; i < orders.size(); i++) {
            	HashMap<String, Object> responseData = new HashMap<String, Object>();
                responseData.put("OfferID" , offer.getOfferID());
                responseData.put("Instrument" , offer.getInstrument());
                responseData.put("QuoteID" , offer.getQuoteID());
                responseData.put("Bid" , offer.getBid());
                responseData.put("Ask" , offer.getAsk());
                responseData.put("BidTradable" , offer.getBidTradable());
                responseData.put("AskTradable" , offer.getAskTradable());
                responseData.put("High" , offer.getHigh());
                responseData.put("Low" , offer.getLow());
                responseData.put("BuyInterest" , offer.getBuyInterest());
                responseData.put("SellInterest" , offer.getSellInterest());
                responseData.put("Volume" , offer.getVolume());
                responseData.put("ContractCurrency" , offer.getContractCurrency());
                responseData.put("Digits" , offer.getDigits());
                responseData.put("PointSize" , offer.getPointSize());
                responseData.put("SubscriptionStatus" , offer.getSubscriptionStatus());
                responseData.put("TradingStatus" , offer.getTradingStatus());
                responseData.put("InstrumentType" , offer.getInstrumentType());
                responseData.put("ContractMultiplier" , offer.getContractMultiplier());
                responseData.put("ValueDate" , offer.getValueDate());
                responseData.put("Time" , offer.getTime());
//                System.out.println(responseData);
                Data[i] = responseData;
//                System.out.println(Data[i]);
                orders = orders.getNextRow(iterator);
            }
    } catch (Exception e) {
        System.out.println("Exception in getOffers().\n\t " + e.getMessage());
    }   
    }

}
