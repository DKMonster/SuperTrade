package com.supertrade.dkcode;

import java.util.HashMap;
import java.util.Map;

import com.fxcore2.O2GAccountRow;
import com.fxcore2.O2GAccountsTableResponseReader;
import com.fxcore2.O2GLoginRules;
import com.fxcore2.O2GResponse;
import com.fxcore2.O2GResponseReaderFactory;
import com.fxcore2.O2GSession;
import com.fxcore2.O2GTableType;
import com.fxcore2.O2GTransport;

public class TestInfo {
	
	static Map<String, Object> responseData = new HashMap<String, Object>();

	public static Map<String, Object> main(String[] args) {
		
		// Connection and session variables
        String mUserID = "";
        String mPassword = "";
        String mURL = "";
        String mConnection = "";
        String mDBName = "";
        String mPin = "";  

        O2GSession mSession = null;

        // Check for correct number of arguments
        if (args.length < 4) {
            System.out.println("Not Enough Parameters!");
            System.out.println("USAGE: [user ID] [password] [URL] [connection] [session ID (if needed)] [pin (if needed)]");
            System.exit(1);
        }

        // Get command line arguments
        mUserID = args[0];
        mPassword = args[1];
        mURL = args[2];
        mConnection = args[3];
        if (args.length > 4) {
            mDBName = args[4];
        }
        if (args.length > 5) {
            mPin = args[5];
        }

        // Create a session, subscribe to session listener, login, get accounts, logout
        try {
            mSession = O2GTransport.createSession();
            SessionStatusListener statusListener = new SessionStatusListener(mSession, mDBName, mPin);
            mSession.subscribeSessionStatus(statusListener);
            while (!statusListener.isConnected() && !statusListener.hasError()) {
                    Thread.sleep(50);
            }
            if (!statusListener.hasError()) {
                getAccounts(mSession);
                while (!statusListener.isDisconnected()) {
                    Thread.sleep(50);
                }
            }
        } catch (Exception e) {
            System.out.println ("Exception: " + e.getMessage());
            System.exit(1);
        }
		return responseData;
    }

    // Get accounts information
    public static void getAccounts(O2GSession session) {
        try {
            O2GLoginRules loginRules = session.getLoginRules();
            if (loginRules != null && loginRules.isTableLoadedByDefault(O2GTableType.ACCOUNTS)) {
                O2GResponse accountsResponse = loginRules.getTableRefreshResponse(O2GTableType.ACCOUNTS);
                O2GResponseReaderFactory responseFactory = session.getResponseReaderFactory();
                O2GAccountsTableResponseReader accountsReader = responseFactory.createAccountsTableReader(accountsResponse);
                for (int i = 0; i < accountsReader.size(); i++) {
                    O2GAccountRow account = accountsReader.getRow(i);
                    responseData.put("AccountID" , account.getAccountID());
                    responseData.put("AccountName" , account.getAccountName());
                    responseData.put("Balance" , account.getBalance());
                    responseData.put("NonTradeEquity" , account.getNonTradeEquity());
                    responseData.put("M2MEquity" , account.getM2MEquity());
                    responseData.put("UsedMargin" , account.getUsedMargin());
                    responseData.put("UsedMargin3" , account.getUsedMargin3());
                    responseData.put("AccountKind" , account.getAccountKind());
                    responseData.put("MarginCallFlag" , account.getMarginCallFlag());
                    responseData.put("LastMarginCallDate" , account.getLastMarginCallDate());
                    responseData.put("MaintenanceType" , account.getMaintenanceType());
                    responseData.put("AmountLimit" , account.getAmountLimit());
                    responseData.put("BaseUnitSize" , account.getBaseUnitSize());
                    responseData.put("MaintenanceFlag" , account.getMaintenanceFlag());
                    responseData.put("ManagerAccountID" , account.getManagerAccountID());
                    responseData.put("LeverageProfileID" , account.getLeverageProfileID());
                    
                }
            }
        } catch (Exception e) {
            System.out.println("Exception in getAccounts():\n\t " + e.getMessage());
        }
    }

}
