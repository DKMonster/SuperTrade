package com.supertrade.dkmonster;

import java.util.HashMap;
import java.util.Map;

import com.fxcore2.O2GOfferTableRow;
import com.fxcore2.O2GOffersTable;
import com.fxcore2.O2GSession;
import com.fxcore2.O2GTableIterator;
import com.fxcore2.O2GTableManager;
import com.fxcore2.O2GTableManagerMode;
import com.fxcore2.O2GTableManagerStatus;
import com.fxcore2.O2GTableType;
import com.fxcore2.O2GTableUpdateType;
import com.fxcore2.O2GTransport;

public class getOffers {

	static Map[] data;
	static Map<String, Object> responseData = new HashMap<String, Object>();

	public static Map[] main(String[] args) {
	    
        // Connection and session variables
        String mUserID = "";
        String mPassword = "";
        String mURL = "";
        String mConnection = "";
        String mDBName = "";
        String mPin = "";
        O2GSession mSession = null;
        String mInstrument = "";
        
        // Check for correct number of arguments
        if (args.length < 5) {
            System.out.println("Not Enough Parameters!");
            System.out.println("USAGE: [instrument] [user ID] [password] [URL] [connection] [session ID (if needed)] [pin (if needed)]");
            System.exit(1);
        }
        
        // Get command line arguments
        mInstrument = args[0];
        mUserID = args[1];
        mPassword = args[2];
        mURL = args[3];
        mConnection = args[4];
        if (args.length > 5) {
            mDBName = args[5];
        }
        if (args.length > 6) {
            mPin = args[6];
        }
        
        // Create a session, subscribe to session listener, login, get offers, logout
        try {
            mSession = O2GTransport.createSession();
            SessionStatusListener statusListener = new SessionStatusListener(mSession, mDBName, mPin);
            mSession.subscribeSessionStatus(statusListener);
            
            mSession.useTableManager(O2GTableManagerMode.YES, null);
            
            mSession.login(mUserID, mPassword, mURL, mConnection);
            while (!statusListener.isConnected() && !statusListener.hasError()) {
                    Thread.sleep(50);
            }
                        
            if (!statusListener.hasError()) {                                
                
                O2GTableManager manager = mSession.getTableManager();
                while (manager.getStatus() == O2GTableManagerStatus.TABLES_LOADING) {                
                     Thread.sleep(50);   
                }                
                
                O2GOffersTable offers = null;
                OffersListener listener = null;
                if (manager.getStatus() == O2GTableManagerStatus.TABLES_LOADED) {                
                    offers = (O2GOffersTable)manager.getTable(O2GTableType.OFFERS);                    
                    getOffers(offers);
                    
                    listener = new OffersListener();                            
                    listener.SetInstrumentFilter(mInstrument);
                    
                    offers.subscribeUpdate(O2GTableUpdateType.UPDATE, listener);                                                           
                                        
                }
                
                System.out.println("Press enter to stop!");
                System.in.read();
                
                if (offers != null) {
                    offers.unsubscribeUpdate(O2GTableUpdateType.UPDATE, listener);
                }
                                                
                mSession.logout();
                while (!statusListener.isDisconnected()) {
                    Thread.sleep(50);
                }
            }
            mSession.unsubscribeSessionStatus(statusListener);            
            mSession.dispose();
            return data;
        } catch (Exception e) {
            System.out.println ("Exception: " + e.getMessage());
            System.exit(1);
        }
    }
    
    // Get offers information
    public static void getOffers(O2GOffersTable offers) { 
        try {            
                O2GOfferTableRow offer = null;
                O2GTableIterator iterator = new O2GTableIterator();
                offer = offers.getNextRow(iterator);
                while (offer != null) {                    
                    System.out.println("Instrument = " + offer.getInstrument() +
                                       " Bid Price = " +  offer.getBid() +
                                       " Ask Price = " + offer.getAsk() +
                                       " PipCost = " + offer.getPipCost());   
                    responseData.put("OfferID" , offer.getOfferID());
                    responseData.put("Instrument" , offer.getInstrument());
                    responseData.put("QuoteID" , offer.getQuoteID());
                    responseData.put("Bid" , offer.getBid());
                    responseData.put("Ask" , offer.getAsk());
                    responseData.put("BidTradable" , offer.getBidTradable());
                    responseData.put("AskTradable" , offer.getAskTradable());
                    responseData.put("High" , offer.getHigh());
                    responseData.put("Low" , offer.getLow());
                    responseData.put("BuyInterest" , offer.getBuyInterest());
                    responseData.put("SellInterest" , offer.getSellInterest());
                    responseData.put("Volume" , offer.getVolume());
                    responseData.put("ContractCurrency" , offer.getContractCurrency());
                    responseData.put("Digits" , offer.getDigits());
                    responseData.put("PointSize" , offer.getPointSize());
                    responseData.put("SubscriptionStatus" , offer.getSubscriptionStatus());
                    responseData.put("TradingStatus" , offer.getTradingStatus());
                    responseData.put("InstrumentType" , offer.getInstrumentType());
                    responseData.put("ContractMultiplier" , offer.getContractMultiplier());
                    responseData.put("ValueDate" , offer.getValueDate());
                    responseData.put("Time" , offer.getTime());
                    data[i] = responseData;
                    offer = offers.getNextRow(iterator);
                }
        } catch (Exception e) {
            System.out.println("Exception in getOffers().\n\t " + e.getMessage());
        }   
    }
}
