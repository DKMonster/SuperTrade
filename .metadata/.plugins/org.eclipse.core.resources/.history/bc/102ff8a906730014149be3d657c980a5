package com.supertrade.dkmonster;

import java.util.HashMap;
import java.util.Map;

import com.fxcore2.*;

public class getOrder {

	static Map[] Data;

	public static Map[] main(String[] args) {

		// Connection and session variables
        String mUserID = "";
        String mPassword = "";
        String mURL = "";
        String mConnection = "";
        String mDBName = "";
        String mPin = "";  

        O2GSession mSession = null;

        // Check for correct number of arguments
        if (args.length < 4) {
            System.out.println("Not Enough Parameters!");
            System.out.println("USAGE: [user ID] [password] [URL] [connection] [session ID (if needed)] [pin (if needed)]");
            System.exit(1);
        }

        // Get command line arguments
        mUserID = args[0];
        mPassword = args[1];
        mURL = args[2];
        mConnection = args[3];
        if (args.length > 4) {
            mDBName = args[4];
        }
        if (args.length > 5) {
            mPin = args[5];
        }

        // Create a session, subscribe to session listener, login, get accounts, logout
        try {
            mSession = O2GTransport.createSession();
            SessionStatusListener statusListener = new SessionStatusListener(mSession, mDBName, mPin);
            mSession.subscribeSessionStatus(statusListener);
            
            System.out.println("a");
            mSession.login(mUserID, mPassword, mURL, mConnection);
            
            System.out.println("b");
            while (!statusListener.isConnected() && !statusListener.hasError()) {
                    Thread.sleep(50);
            }
            System.out.println("c");
            if (!statusListener.hasError()) {
                System.out.println("d");
 
                // Get an instance of table manager
                O2GTableManager tableManager = mSession.getTableManager();
 
                // Check the table manager status
                while (tableManager.getStatus() != O2GTableManagerStatus.TABLES_LOADED &&
                       tableManager.getStatus() != O2GTableManagerStatus.TABLES_LOAD_FAILED) {
                       Thread.sleep(50);
                }
                
                if (tableManager.getStatus() == O2GTableManagerStatus.TABLES_LOADED) {

                    // Get an instance of the O2GTradesTable
                    O2GOrdersTable orderTable = (O2GOrdersTable)tableManager.getTable(O2GTableType.ORDERS);

                    // Get row level information
                    Data = new Map[orderTable.size()];
                    for (int i = 0; i < orderTable.size(); i++) {
                        HashMap<String, Object> responseData = new HashMap<String, Object>();
                        O2GOrderTableRow order = orderTable.getRow(i);
                        responseData.put("OrderID" , order.getOrderID());
                        responseData.put("AccountID" , order.getAccountID());
                        responseData.put("Type" , order.getType());
                        responseData.put("Status" , order.getStatus());
                        responseData.put("TradeID" , order.getTradeID());
                        responseData.put("Amount" , order.getAmount());
                        responseData.put("BuySell" , order.getBuySell());
                        responseData.put("Rate" , order.getRate());
                        responseData.put("Stop" , order.getStop());
                        responseData.put("Limit" , order.getLimit());
                        responseData.put("ValueDate" , order.getValueDate());
                        responseData.put("ExpireDate" , order.getExpireDate());
                        Data[i] = responseData;
                    }
                }
                
                mSession.logout();
                while (!statusListener.isDisconnected()) {
                    Thread.sleep(50);
                }
            }
            mSession.unsubscribeSessionStatus(statusListener);
            mSession.dispose();
        } catch (Exception e) {
            System.out.println ("Exception: " + e.getMessage());
//            System.exit(1);
        }
		return Data;
        
	}
    
    // Get orders information
    public static void getOrders(O2GOrdersTable orders) { 
        try {            
        	O2GOrderTableRow order = null;
            O2GTableIterator iterator = new O2GTableIterator();
            order = orders.getNextRow(iterator);
            Data = new Map[orders.size()];
            for(int i = 0 ; i < orders.size(); i++) {
            	HashMap<String, Object> responseData = new HashMap<String, Object>();
                responseData.put("OrderID" , order.getOrderID());
                responseData.put("AccountID" , order.getAccountID());
                responseData.put("Type" , order.getType());
                responseData.put("Status" , order.getStatus());
                responseData.put("TradeID" , order.getTradeID());
                responseData.put("Amount" , order.getAmount());
                responseData.put("BuySell" , order.getBuySell());
                responseData.put("Rate" , order.getRate());
                responseData.put("Stop" , order.getStop());
                responseData.put("Limit" , order.getLimit());
                responseData.put("ValueDate" , order.getValueDate());
                responseData.put("ExpireDate" , order.getExpireDate());
//                System.out.println(responseData);
                Data[i] = responseData;
//                System.out.println(Data[i]);
                order = orders.getNextRow(iterator);
            }
    } catch (Exception e) {
        System.out.println("Exception in getOrders().\n\t " + e.getMessage());
    }   
    }

}
