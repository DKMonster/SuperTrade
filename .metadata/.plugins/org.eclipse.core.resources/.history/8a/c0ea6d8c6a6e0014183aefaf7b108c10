package com.supertrade.dkmonster;

import java.util.Calendar;

import com.fxcore2.O2GGenericTableResponseReader;
import com.fxcore2.O2GOfferRow;
import com.fxcore2.O2GOffersTableResponseReader;
import com.fxcore2.O2GResponse;
import com.fxcore2.O2GResponseReaderFactory;
import com.fxcore2.O2GResponseType;
import com.fxcore2.O2GSession;
import com.fxcore2.O2GTableColumn;
import com.fxcore2.O2GTableColumnCollection;
import com.fxcore2.O2GTableManagerMode;
import com.fxcore2.O2GTransport;

public class getAllOffers {
	
    // Connection and session variables
	static String mUserID = "";
    static String mPassword = "";
    static String mURL = "";
    static String mConnection = "";
    static String mDBName = "";
    static String mPin = "";
    static O2GSession mSession = null;
    static String mInstrument = "";

	public static void main(String[] args) {
		
        
        try {
			O2GSession session = O2GTransport.createSession();
	        SessionStatusListener statusListener = new SessionStatusListener(mSession, mDBName, mPin);
	        mSession.subscribeSessionStatus(statusListener);
	        
	        mSession.useTableManager(O2GTableManagerMode.YES, null);
	        
	        mSession.login(mUserID, mPassword, mURL, mConnection);
	        while (!statusListener.isConnected() && !statusListener.hasError()) {
	            Thread.sleep(50);
	        }
	        
	        if (!statusListener.hasError()) {
	        	onOffersRecieved(response);	
	        }
        } catch (Exception e) {
            System.out.println ("Exception: " + e.getMessage());
//            System.exit(1);
        }
	}

    private void onOffersRecieved(O2GResponse response) {
        O2GResponseReaderFactory factory = mSession.getResponseReaderFactory();
        if (factory == null)
            return;

        O2GOffersTableResponseReader offersReader = factory.createOffersTableReader(response);
        if (offersReader == null)
            return;

        if (response.getType() == O2GResponseType.TABLES_UPDATES)
            onUpdateOffers(offersReader);
        else
            onOffersTableResponse(offersReader);
    }

    private void onOffersTableResponse(O2GOffersTableResponseReader offersReader) {
        useGenericTableInterface(offersReader);
        useOffersTableIntefaces(offersReader);
    }

    private void useGenericTableInterface(O2GGenericTableResponseReader genericReader) {
        mSimpleLog.log("Generic table");
        O2GTableColumnCollection columns = genericReader.getColumns();
        // Print column
        for (int i = 0; i < columns.size(); i++) {
            O2GTableColumn column = columns.get(i);
            mSimpleLog.log("{0} {1} {2}", i, column.getId(), column.getType());
        }

        for (int i = 0; i < genericReader.size(); i++) {
            int iCount = columns.size();
            for (int j = 0; j < iCount; j++) {
                Object value = genericReader.getCell(i, j);
                boolean bIsCellValid = genericReader.isCellValid(i, j);
                O2GTableColumn column = columns.get(j);
                if (value instanceof Calendar) {
                    value = ((Calendar)value).getTime();
                }
                mSimpleLog.log("{0} = {1} Valid={2}", column.getId(), value, bIsCellValid);
            }
        }
    }

    private void useOffersTableIntefaces(O2GOffersTableResponseReader offersReader) {
        mSimpleLog.log("Offers Table");
        for (int i = 0; i < offersReader.size(); i++) {
            O2GOfferRow offer = offersReader.getRow(i);
            printToLogOffer(offer);
        }
    }

}
