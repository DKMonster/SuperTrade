package com.supertrade.dkmonster;

import java.util.HashMap;
import java.util.Map;

import com.fxcore2.O2GOfferTableRow;
import com.fxcore2.O2GOffersTable;
import com.fxcore2.O2GSession;
import com.fxcore2.O2GTableIterator;
import com.fxcore2.O2GTableManager;
import com.fxcore2.O2GTableManagerMode;
import com.fxcore2.O2GTableManagerStatus;
import com.fxcore2.O2GTableType;
import com.fxcore2.O2GTransport;

public class getOffers {

	static Map[] data;
	static Map<String, Object> responseData = new HashMap<String, Object>();

	public static Map[] main(String[] args) {
		// Connection and session variables
        String mUserID = "";
        String mPassword = "";
        String mURL = "";
        String mConnection = "";
        String mDBName = "";
        String mPin = "";
        O2GSession mSession = null;
 
        // Check for correct number of arguments
        if (args.length < 4) {
            System.out.println("Not Enough Parameters!");
            System.out.println("USAGE: [user ID] [password] [URL] [connection] [session ID (if needed)] [pin (if needed)]");
            System.exit(1);
        }
 
       // Get command line arguments
        mUserID = args[0];
        mPassword = args[1];
        mURL = args[2];
        mConnection = args[3];
        if (args.length > 4) {
            mDBName = args[4];
        }
        if (args.length > 5) {
            mPin = args[5];
        }
 
        // Create a session, subscribe to session listener, login, get open positions information, logout
        try {
 
            // Create a session
            mSession = O2GTransport.createSession();
 
            // Specify that your session uses a table manager
            mSession.useTableManager(O2GTableManagerMode.YES, null);
            SessionStatusListener statusListener = new SessionStatusListener(mSession, mDBName, mPin);
            mSession.subscribeSessionStatus(statusListener);
 
            // Login into the trading server
            mSession.login(mUserID, mPassword, mURL, mConnection);
            while (!statusListener.isConnected() && !statusListener.hasError()) {
                    Thread.sleep(50);
            }
            if (!statusListener.hasError()) {
 
                // Get an instance of table manager
                O2GTableManager tableManager = mSession.getTableManager();
 
                // Check the table manager status
                while (tableManager.getStatus() != O2GTableManagerStatus.TABLES_LOADED &&
                       tableManager.getStatus() != O2GTableManagerStatus.TABLES_LOAD_FAILED) {
                       Thread.sleep(50);
                }
                if (tableManager.getStatus() == O2GTableManagerStatus.TABLES_LOADED) {

                    // Get an instance of the O2GOffersTable
                	O2GOffersTable offersTable = (O2GOffersTable)tableManager.getTable(O2GTableType.OFFERS);
 
                    // Get row level information
                    data = new Map[offersTable.size()];
                    for (int i = 0; i < offersTable.size(); i++) {
                    	O2GTableIterator iterator = new O2GTableIterator();
                    	O2GOfferTableRow offerTableRow = offersTable.getNextRow(iterator);
                        responseData.put("OfferID" , offerTableRow.getOfferID());
                        responseData.put("Instrument" , offerTableRow.getInstrument());
                        responseData.put("QuoteID" , offerTableRow.getQuoteID());
                        responseData.put("Bid" , offerTableRow.getBid());
                        responseData.put("Ask" , offerTableRow.getAsk());
                        responseData.put("BidTradable" , offerTableRow.getBidTradable());
                        responseData.put("AskTradable" , offerTableRow.getAskTradable());
                        responseData.put("High" , offerTableRow.getHigh());
                        responseData.put("Low" , offerTableRow.getLow());
                        responseData.put("BuyInterest" , offerTableRow.getBuyInterest());
                        responseData.put("SellInterest" , offerTableRow.getSellInterest());
                        responseData.put("Volume" , offerTableRow.getVolume());
                        responseData.put("ContractCurrency" , offerTableRow.getContractCurrency());
                        responseData.put("Digits" , offerTableRow.getDigits());
                        responseData.put("PointSize" , offerTableRow.getPointSize());
                        responseData.put("SubscriptionStatus" , offerTableRow.getSubscriptionStatus());
                        responseData.put("TradingStatus" , offerTableRow.getTradingStatus());
                        responseData.put("InstrumentType" , offerTableRow.getInstrumentType());
                        responseData.put("ContractMultiplier" , offerTableRow.getContractMultiplier());
                        responseData.put("ValueDate" , offerTableRow.getValueDate());
                        responseData.put("Time" , offerTableRow.getTime());
                        data[i] = responseData;
                    }
 
//                    // Create an instance of a table listener class
//                    TableListener tableListener = new TableListener();
// 
//                    // Subscribe table listener to table updates
//                    offerTable.subscribeUpdate(O2GTableUpdateType.UPDATE, tableListener);
//                    offerTable.subscribeUpdate(O2GTableUpdateType.INSERT, tableListener);
// 
//                    // Process updates (see TableListener.java)
//                    Thread.sleep(10000);
// 
//                    // Unsubscribe table listener
//                    offerTable.unsubscribeUpdate(O2GTableUpdateType.UPDATE, tableListener);
//                    offerTable.unsubscribeUpdate(O2GTableUpdateType.INSERT, tableListener);
 
                    mSession.logout();
                    while (!statusListener.isDisconnected()) {
                        Thread.sleep(50);
                    }
                }
            }
            mSession.unsubscribeSessionStatus(statusListener);
            mSession.dispose();
//            System.exit(1);
    		return data;
        } catch (Exception e) {
            System.out.println ("Exception: " + e.getMessage());
//            System.exit(1);
            return data;
        }
	}

}
